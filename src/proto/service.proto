syntax = "proto3";

package oceandoc.proto;

import "src/proto/error.proto";
import "src/proto/data.proto";

message Context {
  repeated string private_ipv4 = 1;
  repeated string private_ipv6 = 2;
  repeated string public_ipv4 = 3;
  repeated string public_ipv6 = 4;
  repeated string mac = 5;
}

enum UserOp {
  UserUnused = 0;
  UserCreate = 1;
  UserDel = 2;
  UserLogin = 3;
  UserLogout = 4;
  UserChangePassword = 5;
}

message UserReq {
  string request_id = 1;
  UserOp op = 2;
  string user = 3;
  string password = 4;
  string token = 5;
  string to_delete_user = 6;
}

message UserRes {
  ErrCode err_code = 1;
  string token = 5;
}

enum ServerOp {
  ServerUnused = 0;
  ServerStatus = 1;
  ServerRestart = 2;
  ServerShutdown = 3;
  ServerFullScan = 4;
}

message ServerReq {
  string request_id = 1;
  ServerOp op = 2;
  string path = 3;
  string repo_uuid = 4;
}

message ServerRes {
  ErrCode err_code = 1;
  string status = 2;
}

enum RepoOp {
  RepoUnused = 0;
  RepoCreate = 1;
  RepoDelete = 2;
  RepoChmod = 3;
  RepoChowner = 4;
  RepoServerDir = 5;
  RepoRepoDir = 6;
  RepoCreateDir = 7;
  RepoDelDir = 8;
  RepoDelFile = 9;
}

message RepoReq {
  string request_id = 1;
  RepoOp op = 2;
  RepoType type = 3;
  string path = 4;
  string repo_uuid = 5;
  string name = 6;
  string token = 7;
  string user = 8;
}

message RepoRes {
  ErrCode err_code = 1;
  string repo_uuid = 2;
  map<string, RepoMeta> repos = 3;
  DirItem dir = 4;
}

enum FileOp {
  FileUnused = 0;
  FileExists = 1;
  FilePut = 2;
  FileDelete = 3;
  FileChmod = 4;
  FileChowner = 5;
}

message FileReq {
  string request_id = 1;
  RepoType repo_type = 2;
  FileOp op = 3;
  string src = 4;
  string dst = 5;
  string hash = 6;
  int64 size = 7;
  bytes content = 8;
  int32 partition_num = 9;
  string repo_uuid = 10;
  int64 partition_size = 11;
  FileType file_type = 12;
  string user = 13;
  string group = 14;
  int64 update_time = 15;
}

message FileRes {
  ErrCode err_code = 1;
  string src = 2;
  string dst = 3;
  string hash = 4;
  int32 partition_num = 5;
  FileType file_type = 6;
  string request_id = 7;
  FileOp op = 8;
  bool can_skip_upload = 9;
}

service OceanFile {
  rpc UserOp(UserReq) returns (UserRes);
  rpc ServerOp(ServerReq) returns (ServerRes);
  rpc RepoOp(RepoReq) returns (RepoRes);
  rpc FileOp(stream FileReq) returns (stream FileRes);
}
