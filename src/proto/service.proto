syntax = "proto3";

package oceandoc.proto;

import "src/proto/error.proto";

message Context {
  repeated string private_ipv4 = 1;
  repeated string private_ipv6 = 2;
  repeated string public_ipv4 = 3;
  repeated string public_ipv6 = 4;
  repeated string mac = 5;
}

enum UserOp {
  UserUnused = 0;
  UserCreate = 1;
  UserDel = 2;
  UserAddGroup = 3;
  UserDelGroup = 4;
}

enum ServerOp {
  ServerUnused = 0;
  ServerStatus = 1;
  ServerRestart = 2;
  ServerShutdown = 3;
  ServerFullScan = 4;
}

enum FileOp {
  FileUnused = 0;
  FilePut = 1;
  FileDelete = 2;
  FileChmod = 3;
  FileChowner = 4;
}

enum RepoOp {
  RepoUnused = 0;
  RepoCreate = 1;
  RepoDelete = 2;
  RepoChmod = 3;
  RepoChowner = 4;
}

message UserReq {
  string request_id = 1;
  UserOp op = 2;
  string path = 3;
  string repo_uuid = 4;
}

message UserRes {
  ErrCode err_code = 1;
  string repo_uuid = 2;
}

message ServerReq {
  string request_id = 1;
  ServerOp op = 2;
  string path = 3;
  string repo_uuid = 4;
}

message ServerRes {
  ErrCode err_code = 1;
  string status = 2;
}

message FileReq {
  string request_id = 1;
  FileOp op = 3;
  string path = 4;
  string sha256 = 5;
  int64 size = 6;
  bytes content = 7;
  int32 partition_num = 8;
  string repo_uuid = 9;
}

message FileRes {
  ErrCode err_code = 1;
  string path = 2;
  string sha256 = 3;
  int32 partition_num = 4;
}

message RepoReq {
  string request_id = 1;
  RepoOp op = 2;
  string path = 3;
  string repo_uuid = 4;
}

message RepoRes {
  ErrCode err_code = 1;
  string repo_uuid = 2;
}

service OceanFile {
  rpc UserOp(UserReq) returns (UserRes);
  rpc ServerOp(ServerReq) returns (ServerRes);
  rpc FileOp(stream FileReq) returns (stream FileRes);
  rpc RepoOp(RepoReq) returns (RepoRes);
}
